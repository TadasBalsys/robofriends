{"version":3,"sources":["reducers.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","SearchBox","_ref","searchChange","console","log","react_default","a","createElement","className","type","placeholder","onChange","Card","_ref$robot","robot","name","email","id","src","concat","alt","CardList","map","user","i","components_Card","key","Scroll","props","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","onSearchChange","filterRobots","filter","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2902ef64.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n// Redux The 3 Principles\r\n// 1. Single source of truth - in this case initialState.\r\n// 2. State is read only - searchRobots only creates state, but doesn't modify it.\r\n// 3. Changes using pure functions.\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\n// Reducer, a pure function\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      // return Object.assign({}, state, {searchField: action.payload}) //Another way to do it, but less cleaner\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n  console.log('SearchBox');\r\n  \r\n  return (\r\n    <div className=\"col-12 text-center my-4\">\r\n      <input className=' mt-3' type=\"search\" placeholder=\"Search Robots\" onChange={searchChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ robot: { name, email, id } }) => {\r\n  return (\r\n    <div className=\"col-md-4 col-xl-3 col-12\">\r\n      <div className=\"card myCardStyle\">\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={`https://robohash.org/${id}?size=150x150`}\r\n          alt=\"\"\r\n        />\r\n        <div className=\"card-body text-center\">\r\n          <h4 className=\"card-title letsTryId\">{name}</h4>\r\n          <p className=\"card-text\">{email}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  // if(true){\r\n  //   throw new Error(\"Error\");\r\n  // }\r\n  return (\r\n    <div className=\"row card-columns\">\r\n      {robots.map((user, i) => {\r\n        return <Card key={user.id} robot={user} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='container-fluid'>\r\n            {props.children}\r\n        </div>\r\n    )    \r\n};\r\n\r\nexport default Scroll;\r\n\r\n\r\n// style={{overflow: \"scroll\", border: \"1px solid black\", height: '500px'}}","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Sorry, there is some kind of error</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  // React LifeCycle hook\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.state.count !== nextState.count ? true : false;\r\n  }\r\n  \r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(\"CounterButton\");\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\nclass Header extends Component {\r\n  // React LifeCycle hook\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Header\");\r\n    return (\r\n      <div className=\"text-center col-12 mt-2\">\r\n        <h1>RoboFriends</h1>\r\n        <CounterButton  color={'red'}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","// App.js is called Container or Smart Component\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from '../components/Header';\r\n\r\n// Some Redux setup\r\n// mapStateToProps tels what piece of state in store need to be listen to and send props to component tree.\r\nconst mapStateToProps = state => {\r\n  // searchField state, that going to be return by mapStateToProps function, which is going to be used as props by the App. That state is going to come from the state.searchRobots.searchField (which comes from reducers.js.) Because in index.js store is created and searchRobots is passed as property, now I can use sate.searchRobots\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\n// mapDispatchToProps tells what props should be listen to actions that need to get dispatched.\r\n// React Redux docs: mapDispatchToProps lets you to create a function that dispatch when called, and pass those functions as props to your components\r\nconst mapDispatchToProps = dispatch => {\r\n  // dispatch is what triggers the action. The action (setSearchField) is an object which is created in actions.js. In order to send this action, there is a need of dispatch() to send the action to reducer\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n// End of Redux setup\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filterRobots = robots.filter(robot => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(searchField.toLocaleLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1 className=\"text-center\">Loading...</h1>\r\n    ) : (\r\n      <div className=\"container-fluid w-100\">\r\n        <div className=\"row \">\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// Connect - a higher order function which connects App.js to redux store (\"Subscribe any changes in the Redux Store\")\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","// redux expects that actions returns objects. If other cases, app need extras packages( e.g. redux-thunk)\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\n// gets the user text from input and sets \"state\"\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\n// actions can only return object, but cause there is installed redux-thunk, I can return a function (\"if action returns function it is a middleware\")\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then(response =>\r\n    response\r\n      .json()\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n  );\r\n};\r\n","// it's good practice to keep all constants for actions in separate file. If error accurse, it will show message, what happened. If in action file type will be just string(not imported variable like now) if some error will accurse there will be no message about error.\r\nexport const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// Redux\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\n\r\nimport App from \"../src/containers/App\";\r\n\r\n// Bootstrap\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nimport \"./index.css\";\r\nimport \"./card.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// const  store is Redux Store - place were all states is.\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  // Provider component from react-redux will pass store (a.k.a State) to all components down to component tree\r\n  // The store us is rootReducer or what ever reducers (this case searchRobots) to create the store.\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}